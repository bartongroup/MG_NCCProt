---
title: "Nascent Chromatin Capture Proteomics"
author:
  - name: Marek Gierlinski
    affiliations: Data Analysis Group
    note: "Creator of this report"
  - name: Susanne Bandau
    affiliation: Molecular Cell and Developmental Biology
  - name: Constance Alabert
    affiliation: Molecular Cell and Developmental Biology
date: today
date-format: "D MMMM YYYY"
execute:
  echo: false
  cache: true
  warning: false
format:
  html:
    theme:
      - journal
      - report.scss
    toc: true
editor: source
self-contained: true
---

```{r libraries, cache=FALSE, include=FALSE}
suppressPackageStartupMessages({
  library(targets)
  library(tidyverse)
  library(gt)
  library(cowplot)
  library(UpSetR)
})

tar_config_set(store = "../_targets")
```

# Proposal

## Background

DNA replication results in the transient eviction of chromatin associated proteins including nucleosomes, RNAPII and transcription regulators. In Constance lab, we are studying, the re-association of chromatin factors after the passage of the replication fork (restoration of chromatin). It has been shown that transcription plays a role to promote chromatin accessibility during restoration on newly replicated DNA (Stewart-Morgan 2019, Ramachandran 2016) and regulates the stable association of several proteins to chromatin (Skalska et al. 2021).
 
The aim of this project is to define the role of transcription restart in chromatin restoration following the passage of the fork. We performed iPOND (isolation of proteins on nascent DNA, Sirbu et al., 2012) experiments in asynchronized, primary like TIG-3 cells (see schematic below) to systematically analyse the protein re-association dynamics to newly replicated DNA upon transcription inhibition via quantitative mass spectrometry.
Two transcription inhibitors were used: Triptolide which blocks RNAPII binding and DRB that blocks transcription elongation. The cells were labelled with EdU for 20min (which is a thymidine analogue and is incorporated into newly replicated DNA) and the proteins associated with the newly replicated (EdU labelled) chromatin were analysed after 20min (nascent), 1h or 2h after the passage of the replication fork (Experiment 1). For the 1h and 2h time points, the EdU is removed after 20min, the cells washed and grown for the remaining time in media containing a low concentration of thymidine to outcompete the remaining EdU in the cells. For each time point, 100 million cells (10x 15cm plates) were harvested allowing the EdU-labelling of around 20-25% of the cells that are in S-phase. To allow the isolation of EdU labelled chromatin using Streptavidin beads, Biotin is associated to EdU via a ClickIT reaction. The lysate input samples represent total cell lysates and were taken before adding the streptavidin beads.
In general, we want to identify factors/functional groups that are changing (or are unchanged) on newly replicated chromatin upon transcription inhibition compared to the control cells. There are some proteins which can be seen as controls for the analysis. The isolation of newly replicated DNA was successful when known replication factors (PCNA, POLD1-3, PRIM1, PRIN2, MCM2-7, GINS1, GINS3, RFC1-5) are enriched on nascent chromatin compared to the later time points. In contrast, the Histone H1 subunits should be low on nascent chromatin but high in the 1h and 2h time points, since Histone H1 is part of the higher-order chromatin structure. For the successful treatment with triptolide, we would expect low level of RNA Polymerase II subunits (POLR2A,B,Câ€¦) on chromatin as well as total lysate (inputs) since triptolide leads to the removal of RNA polymerase II from chromatin and to its subsequential degradation.
 
In experiment 2, we analyse the protein content of restored chromatin after 2h or 6h transcription inhibition to recapitulate whether changes observed on newly replicated chromatin are also seen on total (fully restored) chromatin or whether they are specific to newly replicated chromatin. To capture the protein content of longer stretches of chromatin, the EdU labelling was performed for 1h (instead of 20min).


```{r}
#| label: fig-workflow
#| fig-cap: iPOND workflow.
knitr::include_graphics("images/workflow.png")
```

## Experiment

We have two different experiments that we would like to analyse (all proteomics data):

1.  iPOND experiment: This is the experiment that we discussed during our meeting. We isolated nascent, 1h and 2h chromatin -/+ inhibitor treatment as well as took the corresponding total extracts for each sample before adding the beads to analyse total protein amounts (Input). Since we use two different inhibitors (TPL or DRB), we have 9 sample + 1 negative control (unlabelled) for IP as well as 10 Input samples per experiment; n=3(4)

2.  IPOND chase experiments: 6 sample + control (per experiments); n=3 Instead of isolating nascent chromatin, we analyse the chromatin 24h after labelling. This experiment is to consolidate whether the changes seen on nascent chromatin (iPOND experiment) are also seen on total chromatin.

In both cases, we would like to identify proteins/protein groups that show significant foldchanges between time points and treatment (volcano plots). Filter for the significant changing proteins and subject them to a hierarchical clustering analysis as well as to perform GO term analysis.

The Input samples are total lysate and are used to see whether changes observed on newly replicated chromatin are due to changes in total protein level. The inhibitor that we are using are transcription inhibitor and even the treatment is short might affect the expression of certain proteins.
 
The negative controls are cells that are not labelled with EdU and are used to account for non-specific binding to the streptavidin beads that we are using for the pulldown. To perform the pulldown, we are performing a Click-IT reaction to attach Biotin onto EdU. The Biotin attached to the EdU then allows us to pulldown EdU labelled chromatin using streptavidin beads. The non-specific binding during an iPOND experiments can be high.
I normally harvest them together with the 2h time point but since they are unlabelled, untreated, asynchronized cells, the time they are harvest is not that important.

# Design

@fig-design-e1 and @fig-design-e2 illustrate the design of experiments 1 and 2, respectively.


```{r}
#| label: fig-design-e1
#| fig-cap: Illustration of experiment 1 design.
knitr::include_graphics("images/design_1.png")
```

```{r}
#| label: fig-design-e2
#| fig-cap: Illustration of experiment 2 design.
knitr::include_graphics("images/design_2.png")
```

@tbl-metadata shows the detailed design of the experiment.

```{r}
#| label: tbl-metadata
#| tbl-cap: Design of the experiment. Colour-shaded rows indicate grouping by experiment (E1, E2) and protocol (IP, input).
tar_load(metadata) 
metadata |> 
  select(-c(bad, group, tmt_tag)) |> 
  group_by(experiment, protocol) |> 
  gt() |> 
  sub_missing(missing_text = "") |> 
  tab_options(row_group.background.color = "#FFEFDB")
```


# Data overview

MS-MS proteomics data were processed with *MaxQuant* software at Lamond Lab at SLS.

## Source and filtering

Three `proteinGroups` files were used as the starting point. Data were filtered to remove reverse sequences and potential contaminants. Also, only proteins with at least 3 razor pepties were kept.

## Normalisation

Protein intensities were log-transformed (to base 10) and normalised to the median of each sample.

## Protein detection

@fig-protein-detection shows counts of proteins detected in each sample in each experiment. As expected, input protocol returned more proteins than IP.


```{r}
#| label: fig-protein-detection
#| fig-cap: Number of detected proteins in each sample. Panels A, B and C show Experiment 1 IP, Experiment 1 input and Experiment 2 IP, respectively.
#| fig-width: 8
#| fig-height: 12
g1 <- tar_read(fig_sample_detection_e1_ip)
g2 <- tar_read(fig_sample_detection_e1_input)
g3 <- tar_read(fig_sample_detection_e2_ip)
plot_grid(g1, g2, g3, ncol = 1, labels = c("A", "B", "C"))
```

## Correlation matrix

@fig-cormat-bat shows Pearson's correlation coefficient for all pairs of samples. The checkered-flag pattern indicates strong batch effects.

```{r}
#| label: fig-cormat-bat
#| fig-cap: Correlation matrix for all samples. Panels A, B and C show Experiment 1 IP, Experiment 1 input and Experiment 2 IP, respectively.
#| fig-width: 6
#| fig-height: 20
g1 <- tar_read(fig_matrix_bat_e1_ip)
g2 <- tar_read(fig_matrix_bat_e1_input)
g3 <- tar_read(fig_matrix_bat_e2_ip)
plot_grid(g1, g2, g3, ncol = 1, labels = c("A", "B", "C")) 

```

## PCA

@fig-pca-bat shows first two principal components. The input protocol (panel B) shows strong batch effect - the three groups of points belong to three batches (replicates).


```{r}
#| label: fig-pca-bat
#| fig-cap: PCA decomposition based on logarithm of normalised intensity. Panels A, B and C show Experiment 1 IP, Experiment 1 input and Experiment 2 IP, respectively.
#| fig-width: 6
#| fig-height: 14
g1 <- tar_read(fig_pca_bat_e1_ip)
g2 <- tar_read(fig_pca_bat_e1_input)
g3 <- tar_read(fig_pca_bat_e2_ip)
plot_grid(g1, g2, g3, ncol = 1, labels = c("A", "B", "C"))
```

## Clustering

@fig-clustering shows clustering of all samples. Colours represent batches. We can see that batch effects dominate this experiment. Hierarchical clustering was calculated using Euclidean distance and complete linkage method.

```{r}
#| label: fig-clustering-bat
#| fig-cap: Dendrogram of samples, based on logarithm of normalised intensity, with Euclidean distance and complete linkage method. Panels A, B and C show Experiment 1 IP, Experiment 1 input and Experiment 2 IP, respectively.
#| fig-width: 8
#| fig-height: 18
g1 <- tar_read(fig_clustering_bat_e1_ip)
g2 <- tar_read(fig_clustering_bat_e1_input)
g3 <- tar_read(fig_clustering_bat_e2_ip)
plot_grid(g1, g2, g3, ncol = 1, labels = c("A", "B", "C"), rel_heights = c(3, 3, 2)) 
```

# Removing batch effects

@fig-cormat-bat, @fig-pca-bat and @fig-clustering-bat shows that strong batch effects exist in data. These batches are due to separate MS/MS runs. For further processing batch effects are removed using `HarmonizR` with method `limma`. `HarmonizR` finds all batch combinations appearing in the input data and generates sub-dataframes bases on these combinations.

Batch-corrected data are used for downstream analysis. @fig-pca-batch-comparison compares batch-removal methods considered.

```{r}
#| label: fig-pca-batch-comparison
#| fig-cap: Comparison of batch-removal methods. A. Uncorrected data. B. HarmonizR limma correction. C. HarmonizR ComBat correction.
#| fig-width: 6
#| fig-height: 12
g1 <- tar_read(fig_pca_med_e1_ip)
g2 <- tar_read(fig_pca_limma_e1_ip)
g3 <- tar_read(fig_pca_combat_e1_ip)
plot_grid(g1, g2, g3, ncol = 1, labels = c("A", "B", "C")) 
```


## Corrected data

@fig-pca and @fig-clustering show PCA and clustering of batch-corrected data.

```{r}
#| label: fig-pca
#| fig-cap: PCA decomposition based on logarithm of normalised intensity. Panels A, B and C show Experiment 1 IP, Experiment 1 input and Experiment 2 IP, respectively.
#| fig-width: 6
#| fig-height: 14
g1 <- tar_read(fig_pca_e1_ip)
g2 <- tar_read(fig_pca_e1_input)
g3 <- tar_read(fig_pca_e2_ip)
plot_grid(g1, g2, g3, ncol = 1, labels = c("A", "B", "C"))
```

```{r}
#| label: fig-clustering
#| fig-cap: Dendrogram of samples, based on logarithm of normalised intensity, with Euclidean distance and complete linkage method. Panels A, B and C show Experiment 1 IP, Experiment 1 input and Experiment 2 IP, respectively. Colours represent treatments.
#| fig-width: 8
#| fig-height: 18
g1 <- tar_read(fig_clustering_e1_ip)
g2 <- tar_read(fig_clustering_e1_input)
g3 <- tar_read(fig_clustering_e2_ip)
plot_grid(g1, g2, g3, ncol = 1, labels = c("A", "B", "C"), rel_heights = c(3, 3, 2)) 
```


# Experiment 1 IP

## Differential abundance

### From limma R vignette

*For differential abundance we use `limma`. It used an empirical Bayes method to squeeze the peptide-wise residual variances towards a common value (or towards a global trend) (Smyth, 2004; Phipson et al, 2016). The degrees of freedom for the individual variances are increased to reflect the extra information gained from the empirical Bayes moderation, resulting in increased statistical power to detect differential expression.*

For more information see [Ritchie et al. 2015](https://academic.oup.com/nar/article/43/7/e47/2414268).

### In simpler words

`limma` uses a t-test, which is moderated by borrowing data across all proteins. A global variance model is built and moderation squeezes variances towards this global trend. Extreme variances (either large or small) become less extreme, which makes the test more robust to random outliers.

### Significant proteins

Statistically significantly changing proteins are defined based on the false discovery rate, FDR < 0.01.

## Full model

First, we analyse all batch-corrected data using a 'full' model taking into account all potential effects:

`~ treatment + time_point`

Negative samples were removed before applying this model, as they create redundant levels and problematic linear model - the issue is that we have the same level "Neg" both in treatment and time points, that is, there is no separate negative control for treatments and time points.

This approach assumes that effects of treatment and time point are independent and additive. The model will infer the effect of treatment, time point and batch from all data in experiment 1.

The differential abundance is calculated with respect to the baseline:

-   treatment = DMSO
-   time_point = Nascent

@fig-da-full shows volcano and MA plots for each of the coefficients. Each panel corresponds to one value of one coefficient, showing differential abundance with respect to the baseline. For example, `treatmentDRB` shows the effect of DRB inferred from all samples in experiment 1.

```{r}
#| label: fig-da-full
#| fig-cap: Differential abundance plots of the full model `~ treatment + time_point`. Black points indicate proteins with significant differential abundance. A. Volcano plot. B. MA plot.
#| fig-width: 6
#| fig-height: 10
f <- tar_read(figs_full_e1_ip)
plot_grid(f$volcano, f$ma, labels = c("A", "B"), ncol = 1)
```

### Differentially abundant proteins

@fig-prots-da-full show all proteins changing significantly for treatments DRB and TPL.


```{r}
#| label: fig-prots-da-full
#| fig-cap: Batch-corrected, normalised log-abundance of proteins significantly changing for treatment DRB (A) and TPL (B). Please note strong batch effects.
#| fig-width: 8
#| fig-height: 30
g1 <- tar_read(fig_prots_da_full_drb_e1_ip)
g2 <- tar_read(fig_prots_da_full_tpl_e1_ip)
plot_grid(g1, g2, labels = c("A", "B"), ncol = 1)
```

### Removing DA input and Negative control

Note that @fig-prots-da-full shows all proteins changing in IP, but some of them are also differentially abundant in the Input (see @fig-prots-da-input-full) and Negative (see @fig-da-contrasts). @tbl-full-ip-drb and @tbl-full-ip-tpl shows these proteins.

```{r}
da_ip <- tar_read(da_ip) |> 
  select(contrast, Gene = gene_symbols, logFC, FDR, Description = protein_names, Input, Negative) |> 
  mutate(Input = if_else(Input, "yes", "")) |> 
  mutate(Negative = if_else(Negative, "yes", ""))
```

```{r}
#| label: tbl-full-ip-drb
#| tbl-cap: Proteins that are differentially abundant for DRB treatment in IP. Proteins significantly changing in the Input and Negative are marked.
da_ip |> 
  filter(contrast == "treatmentDRB") |> 
  select(-contrast) |> 
  gt() |> 
  fmt_scientific(FDR, rows = FDR < 1e-3, n_sigfig = 2) |> 
  fmt_number(FDR, rows = FDR >= 1e-3, n_sigfig = 2) |> 
  fmt_number(logFC, n_sigfig = 2) |> 
  cols_width(FDR ~ "110px") |> 
  tab_style(
    style = list(cell_fill(color = "beige")),
    locations = cells_body(
      columns = everything(),
      rows = Input != "yes" & Negative != "yes"
    )
  )
```

```{r}
#| label: tbl-full-ip-tpl
#| tbl-cap: Proteins that are differentially abundant for TPL treatment in IP. Proteins significantly changing in the Input and Negative are marked.
da_ip |> 
  filter(contrast == "treatmentTPL") |> 
  select(-contrast) |> 
  gt() |> 
  fmt_scientific(FDR, rows = FDR < 1e-3, n_sigfig = 2) |> 
  fmt_number(FDR, rows = FDR >= 1e-3, n_sigfig = 2) |> 
  fmt_number(logFC, n_sigfig = 2) |> 
  cols_width(FDR ~ "110px") |> 
    tab_style(
    style = list(cell_fill(color = "beige")),
    locations = cells_body(
      columns = everything(),
      rows = Input != "yes" & Negative != "yes"
    )
  )

```

## Model with interactions

The model used in the previous Section assumed that `treatment` and `time_point` are independent variables, so that the effect of treatment is the same regardless of time point and effect of time is the same regardless of treatment. Here we test if there are interactions between the variables, that is if there are proteins that respond to treatment differently at different time poins (or to time at different treatments). The new model is

```
~ treatment + time_point + treatment:time_point
```

There are no significant proteins in interaction terms.

```{r}
#| label: fig-da-int
#| fig-cap: Differential abundance plots of the full model `~ treatment + time_point + treatment:time_point`. Black points indicate proteins with significant differential abundance. A. Volcano plot. B. MA plot.
#| fig-width: 6
#| fig-height: 12
f <- tar_read(figs_int_e1_ip)
plot_grid(f$volcano, f$ma, labels = c("A", "B"), ncol = 1)
```

 
## Selected contrasts

Next, selected contrasts, or pairs of conditions, were selected and differential abundance was carried out. @fig-da-contrasts shows volcano and MA plots for each contrast.

```{r}
#| label: fig-da-contrasts
#| fig-cap: Differential abundance for a selection of contrasts. Black points indicate proteins with significant differential abundance. A. Volcano plot. B. MA plot.
#| fig-width: 8
#| fig-height: 15
f <- tar_read(figs_contrasts_e1_ip)
plot_grid(f$volcano, f$ma, labels = c("A", "B"), ncol = 1) 
```

# Experiment 1 Input

## Full model

Volcano and MA plots are shown in @fig-da-input-full.

```{r}
#| label: fig-da-input-full
#| fig-cap: Differential abundance plots of the full model `~ treatment + time_point + batch`. Black points indicate proteins with significant differential abundance. A. Volcano plot. B. MA plot.
#| fig-width: 6
#| fig-height: 10
f <- tar_read(figs_full_e1_input)
plot_grid(f$volcano, f$ma, labels = c("A", "B"), ncol = 1)
```

@fig-prots-da-input-full shows proteins changing in the Input due to treatments.

```{r}
#| label: fig-prots-da-input-full
#| fig-cap: Batch-corrected normalised log-abundance of proteins significantly changing for treatment DRB (A) and TPL (B). Please note strong batch effects.
#| fig-width: 8
#| fig-height: 40
g1 <- tar_read(fig_prots_da_full_drb_e1_input)
g2 <- tar_read(fig_prots_da_full_tpl_e1_input)
plot_grid(g1, g2, labels = c("A", "B"), ncol = 1, rel_heights = c(2, 1))
```



# Experiment 2 IP

## Full model

First, we analyse all data using a 'full' model. The differential abundance is calculated with respect to the baseline:

-   treatment = DMSO
-   time_point = 2h

@fig-da-full-e2 shows volcano and MA plots for each of the coefficients.


```{r}
#| label: fig-da-full-e2
#| fig-cap: Differential abundance plots of the full model `~ treatment + time_point`. Black points indicate proteins with significant differential abundance. A. Volcano plot. B. MA plot.
#| fig-width: 8
#| fig-height: 6
f <- tar_read(figs_full_e2_ip)
plot_grid(f$volcano, f$ma, labels = c("A", "B"), ncol = 1)
```

### Differentially abundant proteins

@fig-prots-da-full-e2 shows DA proteins for DRB and TPL.

```{r}
#| label: fig-prots-da-full-e2
#| fig-cap: Normalised log-abundance of proteins significantly changing for treatments in TPL.
#| fig-width: 8
#| fig-height: 5
#g1 <- tar_read(fig_prots_da_full_drb_e2_ip)
g2 <- tar_read(fig_prots_da_full_tpl_e2_ip) 
g2
#plot_grid(g1, g2, labels = c("A", "B"), ncol = 1, rel_heights = c(2, 3))
```


## Selected contrasts

```{r}
#| label: fig-da-contrasts-e2
#| fig-cap: Differential abundance for a selection of contrasts. Black points indicate proteins with significant differential abundance. A. Volcano plot. B. MA plot.
#| fig-width: 6
#| fig-height: 10
f <- tar_read(figs_contrasts_e2_ip)
plot_grid(f$volcano, f$ma, labels = c("A", "B"), ncol = 1)  
```


# Normalisation to input

```{r}
tar_load(c(n_ip_all, n_inpnorm_unique, n_inpnorm_none, n_inpnorm_multi))
```

As both IP and input are available for experiment 1, we attempt to normalise IP abundances to Input abundances. The following procedure was applied:

 - Protein groups in IP and Input were matched using gene symbols provided in the file. Where multiple symbols were provided, only the first one was used for comparison. Out of `r n_ip_all` proteins in IP, `r n_inpnorm_unique` were matched uniquely to the corresponding Input proteins, `r n_inpnorm_multi` were matched to multiple Input proteins and `r n_inpnorm_none` IP proteins had no matches in input. Only uniquely matching proteins were used.
 - Input protein median-normalised log-10-abundances were averaged across replicates in each condition (treatment-time).
 - For each IP protein the difference between its median-normalised log-10-abundance and the corresponding averaged values from input was found.
 
The calculated differences are median-normalised log-10-abundance corrected for input. These are used downstream for differential abundance.

## Full model

```{r}
#| label: fig-da-full-inpnorm
#| fig-cap: Differential abundance plots of the full model `~ treatment + time_point`. Black points indicate proteins with significant differential abundance. A. Volcano plot. B. MA plot.
#| fig-width: 6
#| fig-height: 10
f <- tar_read(figs_full_inpnorm)
plot_grid(f$volcano, f$ma, labels = c("A", "B"), ncol = 1) 
```

## Selected contrasts

```{r}
#| label: fig-da-contrasts-inpnorm
#| fig-cap: Differential abundance for a selection of contrasts. Black points indicate proteins with significant differential abundance. A. Volcano plot. B. MA plot.
#| fig-width: 8
#| fig-height: 12
f <- tar_read(figs_contrasts_inpnorm)
plot_grid(f$volcano, f$ma, labels = c("A", "B"), ncol = 1)
```



# Conclusions

Each of the three experiments (E1 IP, E1 Input and E2 IP) was carried out in three mass spectrometer runs, which led to three batches per experiment. This design came from the limitations of TMT spectroscopy that allows for 10 samples multiplexed together. The observed batch effects overshadowed both the time and treatment effects. Specifically, the magnitude of effects from treatments was significantly smaller than those from the batches. This rendered the identification of differentially abundant proteins due to treatment challenging. Furthermore, the presence of only a single replicate within each batch made estimation of within-batch variance impossible.

Batch effects were removed by fitting a linear model to the data matrix and subtracting the estimating batch effects from the original data. This allowed for differential abundance analysis based on the full model, as well as the selection of contrasts of interest.

In addition, an attempt was made to normalise IP abundances to Input abundances, by utilising mean Input abundance across replicates in each condition. These input-corrected data were analysed for differential abundance.

# For manuscript

*MaxQuant's* output files, `proteinGroups.txt`, underwent analysis using R code available at https://github.com/bartongroup/MG_NCCProt. Within R, we imported the protein group files, filtering out proteins with fewer than three unique razor peptides, as well as those identified as reverse sequences or potential contaminants. For subsequent analyses, intensities were log-transformed (base 10) and normalized to the median. Both PCA and clustering plots unveiled pronounced batch effects, predominantly associated with distinct mass spectrometer runs. To mitigate these effects, we employed `HarmonizR`[^1], version `r tar_read(harmonizr_version)`, utilizing the *limma* method. Subsequent PCA and clustering verified the substantial attenuation of these batch effects. For determining differential abundance, we used *limma*[^2] version `r tar_read(limma_version)`, applying a model defined as `~ treatment + time_point`. Multiple test corrections were conducted using the Benjamini-Hochberg method[^3], with proteins exhibiting significant changes between the treatment baseline (DMSO) and the Nascent time point determined by a false discovery rate of less than 0.01. A separate *limma* analysis that incorporated interactions revealed no significant proteins in interaction terms, substantiating the treatment and time point's independence.


[^1]: VoÃŸ, H., Schlumbohm, S., Barwikowski, P. et al. HarmonizR enables data harmonization across independent proteomic datasets with appropriate handling of missing values. Nat Commun 13, 3523 (2022). https://doi.org/10.1038/s41467-022-31007-x

[^2]: Ritchie, M.E., Phipson, B., Wu, D., Hu, Y., Law, C.W., Shi, W., and Smyth, G.K. (2015). limma powers differential expression analyses for RNA-sequencing and microarray studies. Nucleic Acids Research 43(7), e47.

[^3]: Benjamini, Y., Hochberg, Y. (1995). Controlling the False Discovery Rate: A Practical and Powerful Approach to Multiple Testing. Journal of the Royal Statistical Society, 57, 289


# Resources

## Interactive data explorer

 - [Differential expression online app](https://shiny.compbio.dundee.ac.uk/public/marek_ncc_prot/de/)

## Downloads


```{r downloads}
#| label: tbl-downloads
#| tbl-cap: tabulated results from differential abundance.
dwn <- "https://www.compbio.dundee.ac.uk/user/mgierlinski/ncc_prot/tab"
subs <- tribble(
  ~name, ~prefix,
  "Full model", "da_full",
  "Selected contrasts", "da_contrasts",
  "Log ratios", "dl"
)
exps <- tribble(
  ~exp_name, ~suffix,
  "E1 IP", "e1_ip",
  "E1 Input", "e1_input",
  "E2 IP", "e2_ip"
)

expand_grid(subs, exps) |> 
  mutate(
    url = file.path(dwn, str_glue("{prefix}_{suffix}.csv")),
    link = map(url, ~ htmltools::a(href = .x, "CSV")),
    link = map(link, ~ gt::html(as.character(.x)))
  ) |> 
  select(model = name, experiment = exp_name, link) |> 
  group_by(model) |> 
  gt() |> 
  tab_options(row_group.background.color = "#FFEFDB")
```


## Code

The code used to create this report is available on [GitHub](https://github.com/bartongroup/MG_NCCProt).


# Session info

```{r}
#| label: session-info
#| cache: false
si <- targets::tar_read(session_info)
si$loadedOnly <- NULL
si
```
